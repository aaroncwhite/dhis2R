url = 'https://donate.pih.org/modules/maillist/admin/mailing_preview_html.php?mailing_id='
# get the mailing ids already downloaded
for (m in 1:length(mailings$Mailing.ID)) {
print(mailings[m, 1])
remDr$navigate(paste0(url, mailings[m,1]))
Sys.sleep(runif(1,2,4))
a <- htmlParse(remDr$getPageSource()[[1]], asText=T)
HTML(a,file = paste0('scraped/',mailings[m,1],'.html'))
}
for (m in 1:length(generic$Mailing.ID)) {
print(generic[m, 1])
remDr$navigate(paste0(url, generic[m,1]))
Sys.sleep(runif(1,2,4))
a <- htmlParse(remDr$getPageSource()[[1]], asText=T)
HTML(a,file = paste0('scraped/',generic[m,1],'.html'))
}
remDr$open()
remDr$navigate('https://donate.pih.org/ctl/Core/AdminLogin')
Sys.sleep(1)
# enter credentials and submit
remDr$findElement(using='xpath', "//*/input[@id= 'email']")$sendKeysToElement(list('awhite@pih.org'))
remDr$findElement(using='xpath', "//*/input[@id= 'password']")$sendKeysToElement(list('White0818'))
remDr$findElement(using='xpath', "//*/input[@id= 'formSubmit']")$clickElement()
for (m in 1:length(generic$Mailing.ID)) {
print(generic[m, 1])
remDr$navigate(paste0(url, generic[m,1]))
Sys.sleep(runif(1,2,4))
a <- htmlParse(remDr$getPageSource()[[1]], asText=T)
HTML(a,file = paste0('scraped/',generic[m,1],'.html'))
}
source('C:/Users/awhite/Dropbox/Liberia/Waiting Homes/test code.R')
source('C:/Users/awhite/Dropbox/Liberia/Waiting Homes/test code.R')
source('C:/Users/awhite/Dropbox/Liberia/Waiting Homes/test code.R')
shiny::runApp('Haiti/Costing/Shiny Analyzer')
library(shinydashboard)
shiny::runApp('Haiti/Costing/Shiny Analyzer')
shiny::runApp('Haiti/Costing/Shiny Analyzer')
m <- matrix(1:16, nrow=4, ncol=4)
m
diag(m)
diag(m[1:3, 1:3])
diag(m[2:4, 2:4])
m <- matrix(1:400, nrow=20, ncol=20)
diag(m[1:4, 1:4])
diag(m[1:5, 1:5])
diag(m[1:m4, 1:4])
m
diag(m[16:20, 1:4])
min_length <- 4
r_start <- min_length
r_end <- nrow(mat)
c_start <- min_length
mat <- m
r_start <- min_length
r_end <- nrow(mat)
c_start <- min_length
c_end <- ncol(mat)
test_piece <- function(current_cube, piece) {
# test if current piece can be placed
# if true, return position bounds
# if false, return false
cur_view <- examine_cube(current_cube)
d <- dim(piece$shape)
# need to find if there is a space with the same dims as
# the piece given
matches <- list()
pos <- unique(unlist(as.data.frame(cur_view$base)))
pos <- pos[!is.na(pos)]
for (i in pos) {
test <- cur_view$base == i
matches <- append(matches, fit_piece(d, test, c(i:(i + d[3] - 1))))
}
return(matches)
}
library(XLConnect)
expenses <- readWorksheetFromFile('../../Desktop/Shared Expense Tracking.xlsx', 'Expenses')
library(magrittr)
expenses <- readWorksheetFromFile('../../Desktop/Shared Expense Tracking.xlsx', 'Expenses') %>% .[!is.na(.$when),]
expenses <- readWorksheetFromFile('../../Desktop/Shared Expense Tracking.xlsx', 'Expenses')
head(expenses)
expenses <- readWorksheetFromFile('../../Desktop/Shared Expense Tracking.xlsx', 'Expenses') %>% .[!is.na(.$When),]
expenses.agg <- expenses %>% aggregate(by=list(What, Month), sum)
expenses.agg <- expenses %>% aggregate(by=list(.$What, .$Month), sum)
expenses.agg <- expenses %>% aggregate(., by=list(.$What, .$Month), sum)
expenses.agg <- expenses %>% aggregate(.$Amount, by=list(.$What, .$Month), sum)
expenses.agg <- expenses %>% aggregate(.$Amount, by=list(.$What, .$Month),FUN= sum)
expenses.agg <- aggregate(expenses$Amount, by=list(expenses$Month, expenses$What), sum)
expenses.a
expenses.agg
groceries <- c('Groceries', 'TJs', 'Trader Joes', 'Wine', 'Star Market', 'Stop and Shop')
usr <- 'admin'
pwd <- 'district'
url <- 'http://localhost:8080/api/'
usr <- 'admin'
pwd <- 'district'
url <- 'http://localhost:8080/api/'
# Don't forget to source the functions with settings.R too!
# To make things easier, you can define the usr, pwd, and url
# variables in the file and skip manually defining them every time
source('../settings.R') # The ../ means to look in the parent directory
usr <- 'admin'
pwd <- 'district'
url <- 'http://localhost:8080/api/'
# Don't forget to source the functions with settings.R too!
# To make things easier, you can define the usr, pwd, and url
# variables in the file and skip manually defining them every time
source('../settings.R') # The ../ means to look in the parent directory
setwd("C:/Users/awhite/OneDrive/OneDrive - Partners in Health/DHIS2/DHIS2 will save us all/dhis2 package/example")
usr <- 'admin'
pwd <- 'district'
url <- 'http://localhost:8080/api/'
# Don't forget to source the functions with settings.R too!
# To make things easier, you can define the usr, pwd, and url
# variables in the file and skip manually defining them every time
source('../settings.R') # The ../ means to look in the parent directory
usr <- 'admin'
pwd <- 'district'
url <- 'http://localhost:8080/api/'
# Don't forget to source the functions with settings.R too!
# To make things easier, you can define the usr, pwd, and url
# variables in the file and skip manually defining them every time
source('../settings.R') # The ../ means to look in the parent directory
source('../new_instance_setup.R')
necessary <- c('httr', 'magrittr', 'RJSONIO', 'XLConnect', 'rlist', 'stringr',
'doParallel', 'foreach', 'translateR', 'openxlsx', 'htmlTable','plyr')
install <- necessary[!(necessary %in% installed.packages()[,'Package'])]
install.packages('rJava')
usr <- 'admin'
pwd <- 'district'
url <- 'http://localhost:8080/api/'
# Don't forget to source the functions with settings.R too!
# To make things easier, you can define the usr, pwd, and url
# variables in the file and skip manually defining them every time
source('../settings.R') # The ../ means to look in the parent directory
source('C:/Users/awhite/OneDrive/OneDrive - Partners in Health/DHIS2/DHIS2 will save us all/dhis2 package/settings.R', echo=TRUE)
source('C:/Users/awhite/OneDrive/OneDrive - Partners in Health/DHIS2/DHIS2 will save us all/dhis2 package/settings.R', echo=TRUE)
install.packages('rJava')
library(rJava)
usr <- 'admin'
pwd <- 'district'
url <- 'http://localhost:8080/api/'
# Don't forget to source the functions with settings.R too!
# To make things easier, you can define the usr, pwd, and url
# variables in the file and skip manually defining them every time
source('../settings.R') # The ../ means to look in the parent directory
source('C:/Users/awhite/OneDrive/OneDrive - Partners in Health/DHIS2/DHIS2 will save us all/dhis2 package/new_instance_setup.R', echo=TRUE)
source('C:/Users/awhite/OneDrive/OneDrive - Partners in Health/DHIS2/DHIS2 will save us all/dhis2 package/new_instance_setup.R', echo=TRUE)
usr <- 'admin'
pwd <- 'district'
url <- 'http://localhost:8080/api/'
# Don't forget to source the functions with settings.R too!
# To make things easier, you can define the usr, pwd, and url
# variables in the file and skip manually defining them every time
source('../settings.R') # The ../ means to look in the parent directory
source('../new_instance_setup.R')
source('C:/Users/awhite/OneDrive/OneDrive - Partners in Health/DHIS2/DHIS2 will save us all/dhis2 package/new_instance_setup.R', echo=TRUE)
source('C:/Users/awhite/OneDrive/OneDrive - Partners in Health/DHIS2/DHIS2 will save us all/dhis2 package/new_instance_setup.R', echo=TRUE)
source('../new_instance_setup.R')
end_points <- getDHIS2_ResourceTable(usr, pwd, url)
head(end_points)
data_elements <- getDHIS2_Resource('dataElements', usr, pwd, url)
head(data_elements)
# To make things easier, you can define the usr, pwd, and url
# variables in the file and skip manually defining them every time
source('../settings.R') # The ../ means to look in the parent directory
end_points <- getDHIS2_ResourceTable('admin', 'district', 'https://play.dhis2.org/demo/api/')
head(end_points)
data_elements <- getDHIS2_Resource('dataElements', usr, pwd, url)
head(data_elements)
data_elements <- getDHIS2_Resource('dataElements', usr, pwd, url, add_props = c('valueType', 'aggregationType'))
head(data_elements)
options(width = 800)
specific_example <- getDHIS2_elementInfo('FTRrcoaog83','dataElements', usr, pwd, url)
print(specific_example)
print("Display Name:")
print(specific_example$displayName)
# These are all wrapped in cat functions, but it is the same idea, just prettier on the eyes.
cat('Aggregation Type:', specific_example$aggregationType,'\n')
cat('Value Type:', specific_example$valueType,'\n')
cat('Category Combo:', specific_example$categoryCombo,'\n')
# These are all wrapped in cat functions, but it is the same idea, just prettier on the eyes.
cat('Aggregation Type:', specific_example$aggregationType,'\n')
cat('Value Type:', specific_example$valueType,'\n')
cat('Category Combo:', specific_example$categoryCombo$id,'\n')
data_elements <- getDHIS2_Resource('dataElements', usr, pwd, url)
tail(data_elements)
data_elements <- getDHIS2_Resource('dataElements', usr, pwd, url)
head(data_elements)
# 1- Download the data elements and save them to an object
#data_elements <- NULL ## Replace NULL with your code to download the data
# 2- Find the specific data element id
# Hint: the grep() function allows searching text.
grep("Accute Flaccid Paralysis (Deaths < 5 Years)", data_elements$displayName) # returns the index positions in the displayName column where a match for the text was found.
# 1- Download the data elements and save them to an object
#data_elements <- NULL ## Replace NULL with your code to download the data
# 2- Find the specific data element id
# Hint: the grep() function allows searching text.
grep("Accute Flaccid Paralysis (Deaths < 5 yrs)", data_elements$displayName) # returns the index positions in the displayName column where a match for the text was found.
# 1- Download the data elements and save them to an object
#data_elements <- NULL ## Replace NULL with your code to download the data
# 2- Find the specific data element id
# Hint: the grep() function allows searching text.
grep("Accute Flaccid Paralysis (Deaths < 5 yrs)", data_elements$displayName) # returns the index positions in the displayName column where a match for the text was found.
# 1- Download the data elements and save them to an object
#data_elements <- NULL ## Replace NULL with your code to download the data
# 2- Find the specific data element id
# Hint: the grep() function allows searching text.
print(grep("Accute Flaccid Paralysis (Deaths < 5 yrs)", data_elements$displayName)) # returns the index positions in the displayName column where a match for the text was found.
head(data_elements)
grep('Accute Flaccid Paralysis (Deaths < 5 yrs)', data_elements$displayName)
grep('Accute Flaccid Paralysis (Deaths < 5 yrs)', data_elements$displayName, ignore.case = T)
grep('Acute Flaccid Paralysis', data_elements$displayName, ignore.case = T)
grep('Acute Flaccid Paralysis (AFP)', data_elements$displayName, ignore.case = T)
grep('Acute Flaccid Paralysis', data_elements$displayName, ignore.case = T)
tail(data_elements)
getDHIS2_elementInfo('zSJF2b48kOg', 'dataElements', usr, pwd, url)$categoryCombo$id
getDHIS2_elementInfo('zSJF2b48kOg', 'dataElements', usr, pwd, url)$categoryCombo$id
# Step 1 --------------------------------------------------------
# Download the data elements and save them to an object
#data_elements <- NULL ## Replace NULL with your code to download the data
# Hint ----------------------------------------------------------
# the grep() function allows searching text. Watch out for special characters like slashes (\ or /) and parentheses. Those are special characters and might not show up.  Let's just look for something general:
term_positions <- grep("Accute Flaccid Paralysis", data_elements$displayName) # returns the index positions in the displayName column where a match for the text was found.
print(term_positions)
# You can use those index positions to print just that section of the data_elements table:
print(data_elements[term_positions,]) # note the trailing comma to denote that we want just the row positions in term_positions, but we want ALL columns back.
# Or more specifically, in just one column.
print(data_elements$displayName[term_positions]) # note that we don't have any comma here since this is now a one dimensional vector
# Step 2 --------------------------------------------------------
# Find the specific data element id
#data_element_id <- NULL ## Replace NULL with your code
# Step 3 --------------------------------------------------------
# Find the categoryCombo id
cat_combo_id <- 'ck7mRNwGDjP' ## Replace NULL with your code to find the id value
print(cat_combo_id)
if (cat_combo_id == 'ck7mRNwGDjP') cat("Good work!\n") else cat('Check your code again.  The value should be ck7mRNwGDjP\n')
# Step 1 --------------------------------------------------------
# Download the data elements and save them to an object
#data_elements <- NULL ## Replace NULL with your code to download the data
# Hint ----------------------------------------------------------
# the grep() function allows searching text. Watch out for special characters like slashes (\ or /) and parentheses. Those are special characters and might not show up.  Let's just look for something general:
term_positions <- grep("Accute Flaccid Paralysis", data_elements$displayName) # returns the index positions in the displayName column where a match for the text was found.
term_positions
# You can use those index positions to print just that section of the data_elements table:
data_elements[term_positions,] # note the trailing comma to denote that we want just the row positions in term_positions, but we want ALL columns back.
# Or more specifically, in just one column.
data_elements$displayName[term_positions] # note that we don't have any comma here since this is now a one dimensional vector
# Step 2 --------------------------------------------------------
# Find the specific data element id
#data_element_id <- NULL ## Replace NULL with your code
# Step 3 --------------------------------------------------------
# Find the categoryCombo id
cat_combo_id <- 'ck7mRNwGDjP' ## Replace NULL with your code to find the id value
print(cat_combo_id)
if (cat_combo_id == 'ck7mRNwGDjP') cat("Good work!\n") else cat('Check your code again.  The value should be ck7mRNwGDjP\n')
# Step 1 --------------------------------------------------------
# Download the data elements and save them to an object
#data_elements <- NULL ## Replace NULL with your code to download the data
# Hint ----------------------------------------------------------
# the grep() function allows searching text. Watch out for special characters like slashes (\ or /) and parentheses. Those are special characters and might not show up.  Let's just look for something general:
term_positions <- grep("Accute Flaccid Paralysis", data_elements$displayName) # returns the index positions in the displayName column where a match for the text was found.
print('Grep results:')
term_positions
# You can use those index positions to print just that section of the data_elements table:
# data_elements[term_positions,] # note the trailing comma to denote that we want just the row positions in term_positions, but we want ALL columns back.
# Or more specifically, in just one column.
# data_elements$displayName[term_positions] # note that we don't have any comma here since this is now a one dimensional vector
# Step 2 --------------------------------------------------------
# Find the specific data element id
#data_element_id <- NULL ## Replace NULL with your code
# Step 3 --------------------------------------------------------
# Find the categoryCombo id
cat_combo_id <- 'ck7mRNwGDjP' ## Replace NULL with your code to find the id value
print(cat_combo_id)
if (cat_combo_id == 'ck7mRNwGDjP') cat("Good work!\n") else cat('Check your code again.  The value should be ck7mRNwGDjP\n')
# Step 1 --------------------------------------------------------
# Download the data elements and save them to an object
#data_elements <- NULL ## Replace NULL with your code to download the data
# Hint ----------------------------------------------------------
# the grep() function allows searching text. Watch out for special characters like slashes (\ or /) and parentheses. Those are special characters and might not show up.  Let's just look for something general:
term_positions <- grep("Accute Flaccid Paralysis", data_elements$displayName) # returns the index positions in the displayName column where a match for the text was found.
print('Grep results:')
term_positions
# You can use those index positions to print just that section of the data_elements table:
# data_elements[term_positions,] # note the trailing comma to denote that we want just the row positions in term_positions, but we want ALL columns back.
# Or more specifically, in just one column.
# data_elements$displayName[term_positions] # note that we don't have any comma here since this is now a one dimensional vector
# Step 2 --------------------------------------------------------
# Find the specific data element id
#data_element_id <- NULL ## Replace NULL with your code
# Step 3 --------------------------------------------------------
# Find the categoryCombo id
cat_combo_id <- 'ck7mRNwGDjP' ## Replace NULL with your code to find the id value
cat('Category Combo id:', cat_combo_id, '\n')
if (cat_combo_id == 'ck7mRNwGDjP') cat("Good work!\n") else cat('Check your code again.  The value should be ck7mRNwGDjP\n')
# Step 1 --------------------------------------------------------
# Download the data elements and save them to an object
data_elements <- NULL ## Replace NULL with your code to download the data
# Hint ----------------------------------------------------------
# the grep() function allows searching text. Watch out for special characters like slashes (\ or /) and parentheses.
# Those are special characters and might not show up.  Let's just look for something general.  Use the console below
# if in RStudio to render the results interactively.
# term_positions <- grep("Accute Flaccid Paralysis", data_elements$displayName) # returns the index positions in the displayName column where a match for the text was found.
# You can use those index positions to print just that section of the data_elements table:
# data_elements[term_positions,] # note the trailing comma to denote that we want just the row positions in term_positions, but we want ALL columns back.
# Or more specifically, in just one column.
# data_elements$displayName[term_positions] # note that we don't have any comma here since this is now a one dimensional vector
# Step 2 --------------------------------------------------------
# Find the specific data element id
data_element_id <- NULL ## Replace NULL with your code
# Step 3 --------------------------------------------------------
# Find the categoryCombo id
cat_combo_id <- NULL ## Replace NULL with your code to find the id value
cat('Category Combo id:', cat_combo_id, '\n')
if (cat_combo_id == 'ck7mRNwGDjP') cat("Good work!\n") else cat('Check your code again.  The value should be ck7mRNwGDjP\n')
# Step 1 --------------------------------------------------------
# Download the data elements and save them to an object
data_elements <- NULL ## Replace NULL with your code to download the data
# Hint ----------------------------------------------------------
# the grep() function allows searching text. Watch out for special characters like slashes (\ or /) and parentheses.
# Those are special characters and might not show up.  Let's just look for something general.  Use the console below
# if in RStudio to render the results interactively.
# term_positions <- grep("Accute Flaccid Paralysis", data_elements$displayName) # returns the index positions in the displayName column where a match for the text was found.
# You can use those index positions to print just that section of the data_elements table:
# data_elements[term_positions,] # note the trailing comma to denote that we want just the row positions in term_positions, but we want ALL columns back.
# Or more specifically, in just one column.
# data_elements$displayName[term_positions] # note that we don't have any comma here since this is now a one dimensional vector
# Step 2 --------------------------------------------------------
# Find the specific data element id
data_element_id <- NULL ## Replace NULL with your code
# Step 3 --------------------------------------------------------
# Find the categoryCombo id
cat_combo_id <- NULL ## Replace NULL with your code to find the id value
cat('Category Combo id:', cat_combo_id, '\n')
if (cat_combo_id == 'ck7mRNwGDjP' | !is.null(cat_combo_id)) cat("Good work!\n") else cat('Check your code again.  The value should be ck7mRNwGDjP\n')
# Step 1 --------------------------------------------------------
# Download the data elements and save them to an object
data_elements <- NULL ## Replace NULL with your code to download the data
# Hint ----------------------------------------------------------
# the grep() function allows searching text. Watch out for special characters like slashes (\ or /) and parentheses.
# Those are special characters and might not show up.  Let's just look for something general.  Use the console below
# if in RStudio to render the results interactively.
# term_positions <- grep("Accute Flaccid Paralysis", data_elements$displayName) # returns the index positions in the displayName column where a match for the text was found.
# You can use those index positions to print just that section of the data_elements table:
# data_elements[term_positions,] # note the trailing comma to denote that we want just the row positions in term_positions, but we want ALL columns back.
# Or more specifically, in just one column.
# data_elements$displayName[term_positions] # note that we don't have any comma here since this is now a one dimensional vector
# Step 2 --------------------------------------------------------
# Find the specific data element id
data_element_id <- NULL ## Replace NULL with your code
# Step 3 --------------------------------------------------------
# Find the categoryCombo id
cat_combo_id <- NULL ## Replace NULL with your code to find the id value
cat('Category Combo id:', cat_combo_id, '\n')
if (cat_combo_id == 'ck7mRNwGDjP' & !is.null(cat_combo_id)) cat("Good work!\n") else cat('Check your code again.  The value should be ck7mRNwGDjP\n')
# Step 1 --------------------------------------------------------
# Download the data elements and save them to an object
data_elements <- NULL ## Replace NULL with your code to download the data
# Hint ----------------------------------------------------------
# the grep() function allows searching text. Watch out for special characters like slashes (\ or /) and parentheses.
# Those are special characters and might not show up.  Let's just look for something general.  Use the console below
# if in RStudio to render the results interactively.
# term_positions <- grep("Accute Flaccid Paralysis", data_elements$displayName) # returns the index positions in the displayName column where a match for the text was found.
# You can use those index positions to print just that section of the data_elements table:
# data_elements[term_positions,] # note the trailing comma to denote that we want just the row positions in term_positions, but we want ALL columns back.
# Or more specifically, in just one column.
# data_elements$displayName[term_positions] # note that we don't have any comma here since this is now a one dimensional vector
# Step 2 --------------------------------------------------------
# Find the specific data element id
data_element_id <- NULL ## Replace NULL with your code
# Step 3 --------------------------------------------------------
# Find the categoryCombo id
cat_combo_id <- NULL ## Replace NULL with your code to find the id value
cat('Category Combo id:', cat_combo_id, '\n')
if ( !is.null(cat_combo_id) && cat_combo_id == 'ck7mRNwGDjP') cat("Good work!\n") else cat('Check your code again.  The value should be ck7mRNwGDjP\n')
# Step 1 --------------------------------------------------------
# Download the data elements and save them to an object
data_elements <- NULL ## Replace NULL with your code to download the data
# Hint ----------------------------------------------------------
# the grep() function allows searching text. Watch out for special characters like slashes (\ or /) and parentheses.
# Those are special characters and might not show up.  Let's just look for something general.  Use the console below
# if in RStudio to render the results interactively.
# term_positions <- grep("Accute Flaccid Paralysis", data_elements$displayName) # returns the index positions in the displayName column where a match for the text was found.
# You can use those index positions to print just that section of the data_elements table:
# data_elements[term_positions,] # note the trailing comma to denote that we want just the row positions in term_positions, but we want ALL columns back.
# Or more specifically, in just one column.
# data_elements$displayName[term_positions] # note that we don't have any comma here since this is now a one dimensional vector
# Step 2 --------------------------------------------------------
# Find the specific data element id
data_element_id <- NULL ## Replace NULL with your code
# Step 3 --------------------------------------------------------
# Find the categoryCombo id
cat_combo_id <- NULL ## Replace NULL with your code to find the id value
cat('Category Combo id:', cat_combo_id, '\n')
if ( !is.null(cat_combo_id) && cat_combo_id == 'ck7mRNwGDjP') cat("Good work!\n") else cat('Check your code again.  The value should be "ck7mRNwGDjP"\n')
orgs <- getDHIS2_Resource('organisationUnits', usr, pwd, url )
tail(orgs)
table(orgs$displayName)
orgs[grep('Njandama MCHP', orgs$displayName),]
getDHIS2_elementInfo('g8upMTyEZGZ', 'organisationUnits', usr, pwd, url)
org_u <- getDHIS2_elementInfo('g8upMTyEZGZ', 'organisationUnits', usr, pwd, url)
names(org_u)
org_u$level
length(org_u$dataSets)
# Use this code block to investigate
# Question 1 --------------------------------------------------------
# What is the organisation level of Njandama MCHP?
organisation_units <- NULL ## Replace NULL with your code
organisation_unit_id <- NULL ## Replace NULL with your code
organisation_unit_detail <- NULL ## Replace NULL with your code
# Find the level of the Org Unit
# Hint: use the names() function on your object to see what high level pieces of information are available.
# You can then call them using the $ operator like this- object$displayName
organisation_unit_level <- NULL ## Replace NULL with your code
# Question 2 --------------------------------------------------------
# How many data sets are collected there?
# Hint: count the number of child elements using the length function
n_dataSets <- NULL ## Replace NULL with your code
# Answer Check ------------------------------------------------------
if (organisation_unit_level == 4) cat('Organiation unit level correct!\n') else ('Check your organisation unit level code\n')
# Use this code block to investigate
# Question 1 --------------------------------------------------------
# What is the organisation level of Njandama MCHP?
organisation_units <- NULL ## Replace NULL with your code
organisation_unit_id <- NULL ## Replace NULL with your code
organisation_unit_detail <- NULL ## Replace NULL with your code
# Find the level of the Org Unit
# Hint: use the names() function on your object to see what high level pieces of information are available.
# You can then call them using the $ operator like this- object$displayName
organisation_unit_level <- NULL ## Replace NULL with your code
# Question 2 --------------------------------------------------------
# How many data sets are collected there?
# Hint: count the number of child elements using the length function
n_dataSets <- NULL ## Replace NULL with your code
# Answer Check ------------------------------------------------------
if (!is.null(organisation_unit_detail) && organisation_unit_level == 4) cat('Organiation unit level correct!\n') else ('Check your organisation unit level code\n')
if (!is.null(organisation_unit_detail) && n_dataSets == 21) cat('Number of data sets correct!\n') else ('Check your data set code\n')
# Use this code block to investigate
# Question 1 --------------------------------------------------------
# What is the organisation level of Njandama MCHP?
organisation_units <- NULL ## Replace NULL with your code
organisation_unit_id <- NULL ## Replace NULL with your code
organisation_unit_detail <- NULL ## Replace NULL with your code
# Find the level of the Org Unit
# Hint: use the names() function on your object to see what high level pieces of information are available.
# You can then call them using the $ operator like this- object$displayName
organisation_unit_level <- NULL ## Replace NULL with your code
# Question 2 --------------------------------------------------------
# How many data sets are collected there?
# Hint: count the number of child elements using the length function
n_dataSets <- NULL ## Replace NULL with your code
# Answer Check ------------------------------------------------------
if (!is.null(organisation_unit_detail) && organisation_unit_level == 4) cat('Organiation unit level correct!') else ('Check your organisation unit level code')
if (!is.null(organisation_unit_detail) && n_dataSets == 21) cat('Number of data sets correct!') else ('Check your data set code')
# Use this code block to investigate
# Question 1 --------------------------------------------------------
# What is the organisation level of Njandama MCHP?
organisation_units <- NULL ## Replace NULL with your code
organisation_unit_id <- NULL ## Replace NULL with your code
organisation_unit_detail <- NULL ## Replace NULL with your code
# Find the level of the Org Unit
# Hint: use the names() function on your object to see what high level pieces of information are available.
# You can then call them using the $ operator like this- object$displayName
organisation_unit_level <- NULL ## Replace NULL with your code
# Question 2 --------------------------------------------------------
# How many data sets are collected there?
# Hint: count the number of child elements using the length function
n_dataSets <- NULL ## Replace NULL with your code
# Answer Check ------------------------------------------------------
if (!is.null(organisation_unit_detail) && organisation_unit_level == 4) cat('Organiation unit level correct!') else ('Check your organisation unit level code')
if (!is.null(organisation_unit_detail) && n_dataSets == 21) cat('Number of data sets correct!') else ('Check your data set code')
term_positions <- grep("Accute Flaccid Paralysis", data_elements$displayName) # returns the index positions in the displayName column where a match for the text was found.
term_positions
data_elements <- getDHIS2_Resource('dataElements', usr, pwd, url)
term_positions <- grep("Accute Flaccid Paralysis", data_elements$displayName) # returns the index positions in the displayName column where a match for the text was found.
term_positions
data_elements[term_positions,] # note the trailing comma to denote that we want just the row positions in term_positions, but we want ALL columns back.
data_elements$displayName[term_positions] # note that we don't have any comma here since this is now a one dimensional vector
example_data_element <- createDHIS2_DataElement('ANC 1st Visit')
source('C:/Users/awhite/OneDrive/OneDrive - Partners in Health/DHIS2/DHIS2 will save us all/dhis2 package/modules/configuration.R')
example_data_element <- createDHIS2_DataElement('ANC 1st Visit')
example_data_element
example_data_element <- createDHIS2_DataElement('ANC 1st Visit')
example_data_element
source('C:/Users/awhite/OneDrive/OneDrive - Partners in Health/DHIS2/DHIS2 will save us all/dhis2 package/modules/payload_creation.R')
example_data_element <- createDHIS2_DataElement('ANC 1st Visit')
example_data_element
example_data_element <- createDHIS2_DataElement('Womens Health- ANC 1st Visit',
shortName = 'ANC 1st Visit',
description = 'The first time a woman visited the clinic for antenatal care')
example_data_element <- createDHIS2_DataElement('Womens Health- ANC 1st Visit',
shortName = 'ANC 1st Visit',
description = 'The first time a woman visited the clinic for antenatal care')
example_data_element
source('C:/Users/awhite/OneDrive/OneDrive - Partners in Health/DHIS2/DHIS2 will save us all/dhis2 package/modules/payload_creation.R')
example_data_element <- createDHIS2_DataElement('Womens Health- ANC 1st Visit',
shortName = 'ANC 1st Visit',
description = 'The first time a woman visited the
clinic for antenatal care',
valueType = 'INTEGER_POSITIVE',
aggregationType = 'AVERAGE')
example_data_element
example_data_element <- createDHIS2_DataElement('Womens Health- ANC 1st Visit',
shortName = 'ANC 1st Visit',
description = 'The first time a woman visited the clinic for antenatal care',
valueType = 'INTEGER_POSITIVE',
aggregationType = 'AVERAGE')
example_data_element
example_category <- createDHIS2_Category('Sex', options = c('Female','Male'))
example_category
source('C:/Users/awhite/OneDrive/OneDrive - Partners in Health/DHIS2/DHIS2 will save us all/dhis2 package/modules/configuration.R')
post_result <- postDHIS2_metaData(example_data_element,'dataElements', usr, pwd, url)
